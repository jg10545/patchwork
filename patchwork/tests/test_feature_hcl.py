import numpy as npimport tensorflow as tffrom patchwork.feature._hcl import _simclr_softmax_prob, _hcl_softmax_probdef test_simclr_softmax_prob_trivial_case():    gbs = 7    d = 23    z = tf.nn.l2_normalize(np.random.normal(0,1, (gbs,d)))    softmax_prob, nce_batch_acc = _simclr_softmax_prob(z,z,1)        assert softmax_prob.shape == (2*gbs,)    assert (softmax_prob.numpy() >= 0).all()    assert (softmax_prob.numpy() <= 1).all()    assert nce_batch_acc.shape == ()    assert nce_batch_acc.numpy() > 0.9    def test_simclr_softmax_prob_random_case():    gbs = 7    d = 23    z1 = tf.nn.l2_normalize(np.random.normal(0,1, (gbs,d)))    z2 = tf.nn.l2_normalize(np.random.normal(0,1, (gbs,d)))    softmax_prob, nce_batch_acc = _simclr_softmax_prob(z1,z2,1)        assert softmax_prob.shape == (2*gbs,)    assert (softmax_prob.numpy() >= 0).all()    assert (softmax_prob.numpy() <= 1).all()    assert nce_batch_acc.shape == ()    assert nce_batch_acc.numpy() < 0.5            def test_hcl_softmax_prob_trivial_case():    gbs = 7    d = 23    z = tf.nn.l2_normalize(np.random.normal(0,1, (gbs,d)).astype(np.float32))    softmax_prob, nce_batch_acc = _hcl_softmax_prob(z,z,1,1,0.1)        assert softmax_prob.shape == (2*gbs,)    assert (softmax_prob.numpy() >= 0).all()    assert (softmax_prob.numpy() <= 1).all()    assert nce_batch_acc.shape == ()    assert nce_batch_acc.numpy() > 0.9        def test_hcl_softmax_prob_random_case():    gbs = 7    d = 23    z1 = tf.nn.l2_normalize(np.random.normal(0,1, (gbs,d)).astype(np.float32))    z2 = tf.nn.l2_normalize(np.random.normal(0,1, (gbs,d)).astype(np.float32))    softmax_prob, nce_batch_acc = _hcl_softmax_prob(z1,z2,1,1,0.1)        assert softmax_prob.shape == (2*gbs,)    assert (softmax_prob.numpy() >= 0).all()    assert (softmax_prob.numpy() <= 1).all()    assert nce_batch_acc.shape == ()    assert nce_batch_acc.numpy() < 0.5